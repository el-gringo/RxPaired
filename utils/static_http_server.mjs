/**
 * This script is a very simple implementation of an HTTP server to serve just
 * the files generated by `RxPaired`.
 *
 * I judged that writing the strict minimum actually needed here would be less
 * maintenance burden than installing a whole dependency (and perhaps needing
 * to update those regularly due to some obscure bug that most likely didn't
 * even concern us).
 * As for gziping, caching and whatnot, those are not real needs for the
 * scale this file is predicted to be used for, at least for now.
 */

import http from "node:http";
import fs from "node:fs";
import path from "node:path";
import process from "node:process";
import { fileURLToPath } from "node:url";

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  const { argv } = process;
  if (argv.includes("-h") || argv.includes("--help")) {
    displayHelp();
    process.exit(0);
  }

  // The script has been run directly
  const currentDirName = getCurrentDirectoryName();

  let httpPort = 8695;
  let servedFiles;

  let indexOfPort = argv.indexOf("-p");
  if (indexOfPort < 0) {
    indexOfPort = argv.indexOf("--port");
  }
  if (indexOfPort >= 0) {
    if (
      argv.length <= indexOfPort + 1 ||
      !/^[0-9]+$/.test(argv[indexOfPort + 1])
    ) {
      console.error(
        `\u001b[31mError:\u001b[0m No configured port despite a "${argv[indexOfPort]}" ` +
          "option.\n" +
          "You can also run this script with `--help` to have more information on " +
          "available options.",
      );
      process.exit(1);
    }
    httpPort = +argv[indexOfPort + 1];
  }

  if (argv.includes("--include-inspector-files")) {
    servedFiles = {
      "index.html": {
        path: path.join(currentDirName, "..", "inspector", "index.html"),
        contentType: "text/html; charset=UTF-8",
      },

      // Yes, an empty string is actually a valid key!
      "": {
        path: path.join(currentDirName, "..", "inspector", "index.html"),
        contentType: "text/html; charset=UTF-8",
      },

      "inspector.js": {
        path: path.join(currentDirName, "..", "inspector", "inspector.js"),
        contentType: "application/javascript; charset=UTF-8",
      },
    };
  }
  if (argv.includes("--include-client-file")) {
    if (servedFiles === undefined) {
      servedFiles = {};
    }
    servedFiles["client.js"] = {
      path: path.join(currentDirName, "..", "client", "client.js"),
      contentType: "application/javascript; charset=UTF-8",
    };
  }

  if (servedFiles === undefined) {
    console.error(
      "\u001b[31mError:\u001b[0m no file served.\n" +
        "Please call this script at least with an `--include-inspector-files` and/or " +
        "an `--include-client-file` argument respectively to serve the inspector and client" +
        " built files.\n" +
        "You can also run this script with `--help` to have more information on available " +
        "options.",
    );
    process.exit(1);
  }
  startStaticServer(servedFiles, httpPort);
}

export default function startStaticServer(files, port, silent = false) {
  return http
    .createServer(function (request, response) {
      const wantedFile = request.url?.substring("1");

      const fileObject = files[wantedFile];

      if (
        fileObject?.contentType === undefined ||
        fileObject.path === undefined
      ) {
        if (!silent) {
          console.log(
            `\u001b[31mReceived request for unknown resource: ${wantedFile}\u001b[39m`,
          );
        }
        response.writeHead(404, {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain; charset=UTF-8",
        });
        response.end("No file found at the corresponding URL", "utf-8");
        return;
      }

      const { path: fileToRead, contentType } = fileObject;
      if (!silent) {
        console.log(
          `Received request for known resource: \u001b[32m${fileToRead}\u001b[0m`,
        );
      }
      fs.readFile(fileToRead, function (error, fileContent) {
        if (error) {
          if (error.code === "ENOENT") {
            if (!silent) {
              console.log(
                `\u001b[31mFile not reachable: ${fileToRead}\u001b[39m`,
              );
            }
            response.writeHead(404, {
              "Access-Control-Allow-Origin": "*",
              "Content-Type": "text/plain; charset=UTF-8",
            });
            response.end("No file found at the corresponding URL", "utf-8");
            return;
          } else {
            if (!silent) {
              console.log(
                `\u001b[31mAn error occured while trying to read: ${fileToRead}\n` +
                  `error: ${error.code}\u001b[39mA`,
              );
            }
            response.writeHead(500, {
              "Access-Control-Allow-Origin": "*",
              "Content-Type": "text/plain; charset=UTF-8",
            });
            response.end("An error occured: " + String(error.code), "utf-8");
            response.end();
          }
        } else {
          response.writeHead(200, {
            "Access-Control-Allow-Origin": "*",
            "Content-Type": contentType,
          });
          response.end(fileContent, "utf-8");
        }
      });
    })
    .listen(port);

  if (!silent) {
    for (const resource of Object.keys(files)) {
      const fileInfo = files[resource];
      console.log(
        `Serving \u001b[32m${fileInfo.path}\u001b[0m from route \u001b[32m/${resource}\u001b[0m`,
      );
    }
  }

  if (!silent) {
    console.log(
      `\nServer running at \u001b[32mhttp://127.0.0.1:${port}\u001b[0m`,
    );
    console.log("\nHit CTRL-C to stop the server");
  }
}

/**
 * Returns the path to the directory where the current script is found.
 * @returns {String}
 */
function getCurrentDirectoryName() {
  return path.dirname(fileURLToPath(import.meta.url));
}

/**
 * Display through `console.log` an helping message relative to how to run this
 * script.
 */
function displayHelp() {
  console.log(
    /* eslint-disable indent */
    `Usage: node static_http_server.mjs [options]
Options:
  -h, --help                   Display this help
  --include-inspector-files    Serve statically the built files of the RxPaired-inspector.
  --include-client-file        Serve statically the built client-side script.
  -p, --port <number>          Set a specific HTTP port for connections. 8695 by default.`,
    /* eslint-enable indent */
  );
}
