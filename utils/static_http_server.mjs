/**
 * This script is a very simple implementation of an HTTP server to serve just
 * the files generated by `RxPaired`.
 *
 * I judged that writing the strict minimum actually needed here would be less
 * maintenance burden than installing a whole dependency (and perhaps needing
 * to update those regularly due to some obscure bug that most likely didn't
 * even concern us).
 * As for gziping, caching and whatnot, those are not real needs for the
 * scale this file is predicted to be used for, at least for now.
 */

import http from "node:http";
import fs from "node:fs";


export default function startStaticServer(basePath, files, host, port, silent = false) {
  return http
    .createServer(function (request, response) {
      const wantedFile = request.url?.slice(basePath.length).replace(/^\//, '');
      const fileObject = files[wantedFile];
      if (
        fileObject?.contentType === undefined ||
        fileObject.path === undefined
      ) {
        if (!silent) {
          console.log(
            `\u001b[31mReceived request for unknown resource: ${wantedFile}\u001b[39m`,
          );
        }
        response.writeHead(404, {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain; charset=UTF-8",
        });
        response.end("No file found at the corresponding URL", "utf-8");
        return;
      }

      const { path: fileToRead, contentType } = fileObject;
      if (!silent) {
        console.log(
          `Received request for known resource: \u001b[32m${fileToRead}\u001b[0m`,
        );
      }
      fs.readFile(fileToRead, function (error, fileContent) {
        if (error) {
          if (error.code === "ENOENT") {
            if (!silent) {
              console.log(
                `\u001b[31mFile not reachable: ${fileToRead}\u001b[39m`,
              );
            }
            response.writeHead(404, {
              "Access-Control-Allow-Origin": "*",
              "Content-Type": "text/plain; charset=UTF-8",
            });
            response.end("No file found at the corresponding URL", "utf-8");
            return;
          } else {
            if (!silent) {
              console.log(
                `\u001b[31mAn error occured while trying to read: ${fileToRead}\n` +
                  `error: ${error.code}\u001b[39mA`,
              );
            }
            response.writeHead(500, {
              "Access-Control-Allow-Origin": "*",
              "Content-Type": "text/plain; charset=UTF-8",
            });
            response.end("An error occured: " + String(error.code), "utf-8");
            response.end();
          }
        } else {
          response.writeHead(200, {
            "Access-Control-Allow-Origin": "*",
            "Content-Type": contentType,
          });
          const body = fileContent.toString().replace('{{BASE_PATH}}',
            basePath === '/'
              ? '/'
              : basePath + '/'
          );
          response.end(body, "utf-8");
        }
      });
    })
    .listen(port, host);
}
